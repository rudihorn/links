# Shallow encoding of pipes
# Example adapted from Kammar et al. (2013)

typename Comp(e::Row,a::Type) = () ~e~> a;

typename Prod(e::Row,o,a) = (()) {Yield:(o) {}-> () |e}~> a;
typename Cons(e::Row,i,a) = (i)  {Await:i           |e}~> a;

typename Pump(e::Row,o,a)     = Comp({Yield:(o) {}-> () |e}, a);
typename Sink(e::Row,i,a)     = Comp({Await:i           |e}, a);
typename Pipe(e::Row,i,o,a)   = Comp({                  |e}, a);

#
# Operations
#
sig await : () {Await:s |_}-> s
fun await() { do Await }

sig yield : (s) {Yield:(s) {}-> () |_}~> ()
fun yield(s) { do Yield(s) }

#
#
#

sig up : (Comp({Await{ap},Yield:(o) {}-> () |e},    a)) ->
         (Cons({Yield{yp}                   |e}, o, a)) ->
          Comp({Await{ap},Yield{yp}         |e},    a)
fun up(m)(cons)() {
  shallowhandle(m()) {
    case Return(x)  -> x
    case Yield(s,k) -> down(fun() { cons(s) })(k)()
  }
}

sig down : (Comp({Await:i  ,Yield{yp} |e},    a)) ->
           (Prod({Await{ap}           |e}, i, a)) ->
            Comp({Await{ap},Yield{yp} |e},    a)
fun down(m)(prod)() {
  shallowhandle(m()) {
    case Return(x) -> x
    case Await(k)  -> up(fun() { prod(()) })(k)()
  }
}


sig <+< : (Sink({Yield{yp} |e}, s, a), Pump({Await{ap}  |e}, s, a)) -> Pipe({Await{ap},Yield{yp} |e}, s, s, a)
op consumer <+< producer {
   down(consumer)(fun(_) {producer()})
}

sig >+> : (Pump({Await{ap}  |e}, s, a), Sink({Yield{yp} |e}, s, a)) -> Pipe({Await{ap},Yield{yp} |e}, s, s, a)
op producer >+> consumer {
  consumer <+< producer
}

# Some producers and consumers
# Produces an infinite stream of integers starting from [n] *)
sig produceFrom : (Int) -> Pump({ |_}, Int, a)
fun produceFrom(n)() {
    yield(n);
    produceFrom(n+1)()
}

# Accumulates elements from an integer stream until the sum is greater than or equal to [n]
sig sumTo : (Int) -> Pipe({ Await:Int, Yield:(Int) {}-> () |_}, Int, Int, ())
fun sumTo(n)() {
  fun sumTo_aux(acc, lim) {
    if (acc >= lim) {
      yield(acc)
    } else {
      var x = await();
      sumTo_aux(acc+x, lim)
    }
  }
  sumTo_aux(0, n)
}

# Skips [n] elements from an arbitrary stream
sig skip : (Int) -> Pipe({ Await:s, Yield:(s) {}-> () |_}, s, s, a)
fun skip(n)() {
   if (n <= 0) { yield(await()); skip(0)() }
   else {
     var _ = await();
     skip(n-1)()
   }
}

# Turns a stream of as into a stream of bs
sig converter : ((a) {Await:a, Yield:(b) {}-> () |e}~> b) -> Pipe({ Await:a, Yield:(b) {}-> () |e}, a, b, c)
fun converter(conv)() {
    var b = conv(await());
    yield(b);
    converter(conv)()
}

# Prints a stream of as
sig printer : ((a) {Await:a |e}~> String) -> Sink({ |e}, a, b)
fun printer(toString)() {
    var n = await();
    print(toString(n));
    printer(toString)()
}

fun example() {
  ( produceFrom(0)            # yields INT
 >+>
    skip(99)                  # yields INT
 >+>
    sumTo(100)                # yields INT
 >+>
    converter(intToFloat)     # yields FLOAT
 >+>
    converter(floatToString)  # yields STRING
 >+>
    printer(id)               # sink
 ) ()
}
