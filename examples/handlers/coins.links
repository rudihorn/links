typename Zero = [||];

typename Comp(e::Eff,a) = (() ~e~> a);
typename CF(e::Eff, a) = Comp({Choice: (()) {}-> Bool,
                               Failure:(()) {}-> Zero|e},
                              a);

sig choice : Comp({Choice:(()) {}-> Bool|_}, Bool)
fun choice() {do Choice(())}

sig choose : (a, a) {Choice:(()) {}-> Bool|_}~> a
fun choose(x,y) {if (choice()) {x} else {y}}

sig fail : Comp({Failure:(()) {}-> Zero|_}, a)
fun fail() {switch (do Failure(())) { }}

sig allResults : (CF({}, a)) {}~> [a]
fun allResults(m) {
  handle(m()) {
    case Return(x)     -> [x]
    case Choice((),k)  -> k(true) ++ k(false)
    case Failure((),k) -> []
  }
}

typename Toss = [|Heads|Tails|];

sig drunkToss : CF({ |_}, Toss)
fun drunkToss() {
  if (choice()) {
    choose(Heads, Tails)
  } else {
    fail()
  }
}

sig drunkTosses : (Int) -> CF({ |_}, [Toss])
fun drunkTosses(n)() {
  for (_ <- [1..n]) [drunkToss()]
}

sig rand : Comp({Rand:(()) {}-> Float|_}, Float)
fun rand() {do Rand(())}

sig randomResult :
  (Comp({Choice:(()) {}-> Bool, Rand:(()) {}-> Float|e}, a)) ->
   Comp({Choice{_},             Rand:(()) {}-> Float|e}, a)
fun randomResult(m)() {
  handle(m()) {
    case Return(x)    -> x
    case Choice((),k) -> k (rand() < 0.5)
  }
}

sig persevere : (Comp({Failure:(()) {}-> Zero|e}, a)) ->
                 Comp({Failure{_}            |e}, a)
fun persevere(m)() {
  handle(m()) {
    case Return(x)     -> x
    case Failure((),k) -> persevere(m)()
  }
}

sig maybeResult : (Comp({Failure:(()) {}-> Zero|e}, a)) ->
                   Comp({Failure{_}            |e}, Maybe(a))
fun maybeResult(m)() {
  handle(m()) {
    case Return(x)     -> Just(x)
    case Failure((),k) -> Nothing
  }
}

sig handleRandom : (Comp({Rand:(()) {}-> Float}, a)) {}~> a
fun handleRandom(m) {
  handle(m()) {
    case Return(x)  -> x
    case Rand((),k) -> k (random())
  }
}

op g -<- f {fun (x) {g(f(x))}}

fun sampleMaybe(m) {(handleRandom -<- maybeResult -<- randomResult)(m)}
fun sampleMaybe2(m) {(handleRandom -<- randomResult -<- maybeResult)(m)}
fun sample(m) {(handleRandom -<- persevere -<- randomResult)(m)}
fun sample2(m) {(handleRandom -<- randomResult -<- persevere)(m)}

allResults(drunkTosses(3))
#sampleMaybe(drunkTosses(2))
#sampleMaybe2(drunkTosses(2))
#sample(drunkTosses(5))
#sample2(drunkTosses(5))
